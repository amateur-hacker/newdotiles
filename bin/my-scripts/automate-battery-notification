#!/usr/bin/env bash

# Specify the path for the lock file
LOCKFILE=/tmp/battery_notification.lock

# Check if the lock file exists and exit if it does
if [[ -e $LOCKFILE ]] && kill -0 "$(cat $LOCKFILE)" 2>/dev/null; then
  echo "Script is already running"
  exit 1
fi

# Create the lock file with the PID of the current process
echo $$ >"$LOCKFILE"

# This is an infinite loop that checks the battery status every 5 minutes
while true; do

  # Get the battery status (Charging, Discharging or Full) from the 'acpi' command
  status=$(acpi -b | awk '{print $3}' | tr -d ',')

  # If the battery is discharging and the percentage is less than 15%
  if [[ $status == "Discharging" ]]; then
    charge=$(acpi -b | awk '{print $4}' | tr -d '%,')
    if [[ $charge -lt "15" ]]; then
      # Display a notification using 'dunstify' and play a low-charged.mp3 file using 'mpv'
      dunstify -i battery-alert "Low Battery" "${charge}% of battery remaining." -u critical -r 9991 -t 5000
      mpv "$HOME/downloads/battery-voices/low-charged.mp3"
    fi

  # If the battery is charging or full and the percentage is greater than 90%
  elif [[ $status == "Charging" || $status == "Full" ]]; then
    charge=$(acpi -b | awk '{print $4}' | tr -d '%,')
    if [[ $charge -gt "90" ]]; then
      # Display a notification using 'dunstify' and play a fully-charged.mp3 file using 'mpv'
      dunstify -i battery-charging "Full Battery" "The battery is at ${charge}%" -r 9991 -t 5000
      mpv "$HOME/downloads/battery-voices/fully-charged.mp3"
    fi
  fi

  # Wait for 1 minutes before checking the battery status again
  sleep 1m
done

# Remove the lock file when the script exits
rm -f "$LOCKFILE"
